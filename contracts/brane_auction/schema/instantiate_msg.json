{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base_factory_address",
    "bid_denom",
    "first_submission",
    "free_vote_addr",
    "mint_cost"
  ],
  "properties": {
    "base_factory_address": {
      "type": "string"
    },
    "bid_denom": {
      "description": "Bid denom",
      "type": "string"
    },
    "collection_params": {
      "description": "making this an option makes testing easier & allows pre-existing collections to be added if they give the contract mint ability",
      "anyOf": [
        {
          "$ref": "#/definitions/CollectionParams"
        },
        {
          "type": "null"
        }
      ]
    },
    "first_submission": {
      "description": "First submission for the first NFT auction of the collection",
      "allOf": [
        {
          "$ref": "#/definitions/SubmissionInfo"
        }
      ]
    },
    "free_vote_addr": {
      "description": "Free vote address",
      "type": "string"
    },
    "incentive_denom": {
      "description": "Memecoin denom",
      "type": [
        "string",
        "null"
      ]
    },
    "mint_cost": {
      "description": "Mint cost testnet: 50_000_000u64 mainnet: 5_000_000u64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "minter_addr": {
      "description": "Minter address If you have an existing collection, pass the base-minter && sg721 here to skip the instantiation",
      "type": [
        "string",
        "null"
      ]
    },
    "sg721_addr": {
      "type": [
        "string",
        "null"
      ]
    },
    "sg721_code_id": {
      "description": "Collection Params sg721 code_IDs -> testnet: 2595, mainnet: 180",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "CollectionInfo_for_RoyaltyInfoResponse": {
      "type": "object",
      "required": [
        "creator",
        "description",
        "image"
      ],
      "properties": {
        "creator": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "explicit_content": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "external_link": {
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "type": "string"
        },
        "royalty_info": {
          "anyOf": [
            {
              "$ref": "#/definitions/RoyaltyInfoResponse"
            },
            {
              "type": "null"
            }
          ]
        },
        "start_trading_time": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "CollectionParams": {
      "type": "object",
      "required": [
        "code_id",
        "info",
        "name",
        "symbol"
      ],
      "properties": {
        "code_id": {
          "description": "The collection code id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "info": {
          "$ref": "#/definitions/CollectionInfo_for_RoyaltyInfoResponse"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "RoyaltyInfoResponse": {
      "type": "object",
      "required": [
        "payment_address",
        "share"
      ],
      "properties": {
        "payment_address": {
          "type": "string"
        },
        "share": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "SubmissionInfo": {
      "type": "object",
      "required": [
        "proceed_recipient",
        "submitter",
        "token_uri"
      ],
      "properties": {
        "proceed_recipient": {
          "$ref": "#/definitions/Addr"
        },
        "submitter": {
          "$ref": "#/definitions/Addr"
        },
        "token_uri": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
